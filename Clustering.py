# -*- coding: utf-8 -*-
"""Clustering.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_9qbRtHQFg107ECSKYSFWgV0n8HmD8F-
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib as mpl
import matplotlib.pyplot as plt
import plotly.express as px
import seaborn as sns
from scipy.spatial import distance

"""##Mount & Read File From Drive

Bisa dirubah jika tidak ingin membaca file dari drive dengan :


dataset = pd.read_csv("path or filename(jika dalam satu folder)")
"""

from google.colab import drive #mount drive
drive.mount('/content/gdrive')
path = 'gdrive/My Drive/Colab Notebooks/Dataset.csv'
dataset = pd.read_csv(path)

"""## **Eksplorasi Data & Data Preparation**"""

dataset = dataset[['height_cm','weight_kg']]

dataset.head()

"""1. Melihat dimensi data"""

dataset.shape

"""2. Melihat tipe data dari masing-masing kolom"""

dataset.dtypes

"""3. Missing Value"""

dataset.describe()

print(dataset.isnull().sum())

"""tidak ada missing value

4. Outlier
"""

mpl.rcParams['figure.dpi'] = 70
plt.figure(figsize=(60, 60))
f, axes = plt.subplots(1, 2)
sns.boxplot(y=dataset["weight_kg"], ax=axes[0])
sns.boxplot(y=dataset["height_cm"], ax=axes[1])
plt.subplots_adjust(wspace=1)

# dataset.plot(kind='box', subplots=True, layout=(1,9), sharex=False, sharey=False)
# # plt.xticks(rotation=90)
# plt.show()

"""outlier ada, tapi masih termasuk data yang wajar. nilai outlier diambil dari quartil, tapi bukan berarti data yang termasuk outlier itu tidak mungkin.

## **Pemodelan**

1. Penambahan kolom cluster untuk memudahkan
"""

dataset = pd.DataFrame(dataset, columns=['height_cm', 'weight_kg', 'cluster'])
data = dataset.copy()
#membuat kolom cluster yang diisi dengan -1
temp = []
for i in range(len(dataset['height_cm'])):
    temp.append(-1)
    
dataset['cluster'] = temp

"""2. visualisasi data"""

sns.scatterplot(x='height_cm', y='weight_kg', data=dataset)

"""3. Pembuatan centroid dengan K = 3"""

centro = [
    [0, 0, '0'],
    [0, 0, '1'],
    [0, 0, '2'],
]
# kita buat menjadi dataframe
centroid = pd.DataFrame(centro, columns=['height_cm', 'weight_kg', 'cluster'])

height_cm = []
weight_kg = []
x0 = np.random.randint(min(dataset['height_cm']),max(dataset['height_cm']))
y0 = np.random.randint(min(dataset['weight_kg']),max(dataset['weight_kg']))
x1 = np.random.randint(min(dataset['height_cm']),max(dataset['height_cm']))
y1 = np.random.randint(min(dataset['weight_kg']),max(dataset['weight_kg']))
x2 = np.random.randint(min(dataset['height_cm']),max(dataset['height_cm']))
y2 = np.random.randint(min(dataset['weight_kg']),max(dataset['weight_kg']))

height_cm.append(x0)
height_cm.append(x1)
height_cm.append(x2)
weight_kg.append(y0)
weight_kg.append(y1)
weight_kg.append(y2)

centroid['height_cm'] = height_cm
centroid['weight_kg'] = weight_kg
centroid

"""penentuan centroid awal mempengaruhi hasil akhir clustering

4. Memasukkan centroid sesuai titiknya
"""

sns.scatterplot(x='height_cm', y='weight_kg', hue='cluster', data=dataset.append(centroid))

"""cluster -1 artinya adalah belum masuk ke dalam salah satu cluster (bisa diganti angka lain)

5. Pembuatan data untuk pergantian centroid
"""

update = [
    [0, 0, '0'],
    [0, 0, '1'],
    [0, 0, '2'],
]

# kita buat menjadi dataframe
centroidBaru = pd.DataFrame(update, columns=['height_cm', 'weight_kg', 'cluster'])
centroidBaru

"""6. Proses clustering dan perubahan titik centroid (dilakukan hingga posisi titik centroid sudah tidak berpindah lagi)"""

notSame = True
j = 1
while (notSame is True): #akan melakukan looping selama "notSame " bernilai True (titik centroid sudah tidak berubah)
    clusterr = []
    baru  = []

    x02, y02 = centroid.iloc[0][['height_cm', 'weight_kg']] #mengambil titik Centroid ke 0
    x12, y12 = centroid.iloc[1][['height_cm', 'weight_kg']] #mengambil titik Centroid ke 1
    x22, y22 = centroid.iloc[2][['height_cm', 'weight_kg']] #mengambil titik Centroid ke 2

    #mencari centroid terdekat dengan setiap titik
    for i in range(len(dataset)):
        x1, y1 = dataset.iloc[i][['height_cm', 'weight_kg']] #mengambil titik untuk setiap data pada dataset

        # euclidean distant
        dist0 = np.sqrt(pow((x02-x1),2) + pow((y02-y1),2))
        dist1 = np.sqrt(pow((x12-x1),2) + pow((y12-y1),2))
        dist2 = np.sqrt(pow((x22-x1),2) + pow((y22-y1),2))

        if (dist0 < dist1) and (dist0 < dist2):
            hasil = '0'
        elif  (dist1 < dist0) and (dist1 < dist2):
            hasil = '1'
        elif  (dist2 < dist0) and (dist2 < dist1):
            hasil = '2'
        clusterr.append(hasil)
    
    #ganti kolom 'cluster' pada dataset dengan list clusterr tadi
    dataset['cluster'] = clusterr 
    
    #Update centroid
    x0 = dataset[dataset['cluster'] == '0']['height_cm'].tolist()
    y0 = dataset[dataset['cluster'] == '0']['weight_kg'].tolist()
    
    #menghitung mean untuk nilai baru dari centroid 0
    mean_x0 = np.mean(x0)
    mean_y0 = np.mean(y0)

    x1 = dataset[dataset['cluster'] == '1']['height_cm'].tolist()
    y1 = dataset[dataset['cluster'] == '1']['weight_kg'].tolist()
    
    #menghitung mean untuk nilai baru dari centroid 1
    mean_x1 = np.mean(x1)
    mean_y1 = np.mean(y1)

    x2 = dataset[dataset['cluster'] == '2']['height_cm'].tolist()
    y2 = dataset[dataset['cluster'] == '2']['weight_kg'].tolist()
    
    #menghitung mean untuk nilai baru dari centroid 2
    mean_x2 = np.mean(x2)
    mean_y2 = np.mean(y2)

    #mengganti nilai centroidBaru dengan mean yang sudah dihitung tadi
    centroidBaru.iloc[0,0] = mean_x0
    centroidBaru.iloc[0,1] = mean_y0
    centroidBaru.iloc[1,0] = mean_x1
    centroidBaru.iloc[1,1] = mean_y1
    centroidBaru.iloc[2,0] = mean_x2
    centroidBaru.iloc[2,1] = mean_y2

    #cek perubahan titik centroid
    if (centroidBaru.iloc[0,:2].all() != centroid.iloc[0,:2].all()):
        centroid,centroidBaru = centroidBaru, centroid 
    else:
        notSame = False
    # print('ini loop ke ', j)
    # j = j+1

centroidBaru

"""titik centroidnya sekarang seperti ini

7. Hasil Clustering
"""

sns.scatterplot(x='height_cm', y='weight_kg', hue='cluster', data=dataset)

"""## **Evaluasi (SSE)**

perhitungan SSE dilakukan secara manual dengan menghitung 
kuadrat jarak dari tiap titik anggota cluster ke centroidnya masing-masing, lalu dijumlahkan. SSE merupakan hasil dari penjumlahan semua cluster
"""

x02, y02 = centroid.iloc[0][['height_cm', 'weight_kg']] #mengambil titik Centroid ke 0
x12, y12 = centroid.iloc[1][['height_cm', 'weight_kg']] #mengambil titik Centroid ke 1
x22, y22 = centroid.iloc[2][['height_cm', 'weight_kg']] #mengambil titik Centroid ke 2

nol = []
one = []
dua = []

#mengambil titik dari anggota cluster 0
x0 = dataset[dataset['cluster'] == '0']['height_cm'].tolist()
y0 = dataset[dataset['cluster'] == '0']['weight_kg'].tolist()

#menghitung jarak lalu dikuadratkan (akar hilang)
for i in range(len(x0)):
    dist0 = (pow((x02-x0[i]),2) + pow((y02-y0[i]),2))
    nol.append(dist0)

#mengambil titik dari anggota cluster 1
x1 = dataset[dataset['cluster'] == '1']['height_cm'].tolist()
y1 = dataset[dataset['cluster'] == '1']['weight_kg'].tolist()

#menghitung jarak lalu dikuadratkan (akar hilang)
for j in range(len(x1)):
    dist1 = (pow((x12-x1[j]),2) + pow((y12-y1[j]),2))
    one.append(dist1)

#mengambil titik dari anggota cluster 2            
x2 = dataset[dataset['cluster'] == '2']['height_cm'].tolist()
y2= dataset[dataset['cluster'] == '2']['weight_kg'].tolist()

#menghitung jarak lalu dikuadratkan (akar hilang)
for k in range(len(x2)):
    dist2 = (pow((x22-x2[k]),2) + pow((y22-y2[k]),2))
    dua.append(dist2)

c0 = sum(nol)
c1 = sum(one)
c2 = sum(dua)

print('SSE Model Pertama :',c0+c1+c2)